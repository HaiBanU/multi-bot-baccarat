# file: run_all_bots.py

import telegram
import asyncio
import random
import time
import os
from dotenv import load_dotenv
from collections import deque
from datetime import datetime, timedelta, timezone, time as dt_time
from telegram.request import HTTPXRequest

# Import c√°c k·ªãch b·∫£n t·ª´ th∆∞ m·ª•c con
from k·ªãch_b·∫£n.kho_kich_ban_sinh_vien import SCENARIOS_SINH_VIEN
from k·ªãch_b·∫£n.kho_kich_ban_tho_ho import SCENARIOS_THO_HO
from k·ªãch_b·∫£n.kho_kich_ban_me_bim import SCENARIOS_NOI_TRO_VY
# M·ªöI: Import c√°c c·∫•u tr√∫c c√¢u ƒë√£ ƒë∆∞·ª£c n√¢ng c·∫•p
from k·ªãch_b·∫£n.cau_truc_cau import SINH_VIEN_COMPONENTS, THO_HO_COMPONENTS, ME_BIM_COMPONENTS

load_dotenv()

CHAT_ID = os.getenv("CHAT_ID")
VN_TZ = timezone(timedelta(hours=7))

# =================================================================
# TH·ªúI GIAN HO·∫†T ƒê·ªòNG CHUNG ƒê√É ƒê∆Ø·ª¢C C·∫¨P NH·∫¨T T·∫†I ƒê√ÇY
# =================================================================
GLOBAL_ACTIVE_START = dt_time(6, 30)
GLOBAL_ACTIVE_END = dt_time(23, 30)


class TelegramBotPersona:
    def __init__(self, config):
        self.bot_name = config['name']
        self.token = os.getenv(config['token_env_var'])
        self.scenarios = config['scenarios']
        self.components = config.get('components', {})
        self.time_windows = config['time_windows']
        self.message_interval = config['message_interval']
        self.cooldown = config['cooldown']
        self.avoid_last_n = 50

        if not self.token:
            print(f"‚ùå L·ªñI: Kh√¥ng t√¨m th·∫•y token cho bot '{self.bot_name}'. Vui l√≤ng ki·ªÉm tra file .env.")
            return

        request_handler = HTTPXRequest(connect_timeout=30.0, read_timeout=30.0)
        self.bot = telegram.Bot(token=self.token, request=request_handler)

        self.recent_messages = {category: deque(maxlen=self.avoid_last_n) for category in self.scenarios.keys()}
        self.next_send_time = {}

    def get_unique_random_message(self, category):
        possible_messages = self.scenarios.get(category, [])
        if not possible_messages: return None
        
        available_messages = [m for m in possible_messages if m not in self.recent_messages[category]]
        if not available_messages:
            self.recent_messages[category].clear()
            available_messages = possible_messages

        message = random.choice(available_messages)
        self.recent_messages[category].append(message)
        return message

    # =================================================================
    # N√ÇNG C·∫§P L·ªöN: H√ÄM T·∫†O C√ÇU ƒêA C·∫§U TR√öC
    # =================================================================
    def generate_human_message(self, base_message):
        if not self.components or not base_message:
            return base_message

        comp = self.components
        
        # --- ƒê·ªäNH NGHƒ®A C√ÅC C·∫§U TR√öC C√ÇU (K·ªäCH B·∫¢N N√ìI CHUY·ªÜN) ---

        # C·∫•u tr√∫c 1: Ch√†o h·ªèi + N·ªôi dung ch√≠nh + C√¢u k·∫øt c·∫£m x√∫c
        def template_greeting_statement_closing(base, c):
            greeting = random.choice(c.get("greetings", [""]))
            closing = random.choice(c.get("closings", [""]))
            return f"{greeting} {base[0].lower()}{base[1:]}. {closing}"

        # C·∫•u tr√∫c 2: N·ªôi dung ch√≠nh + C√¢u h·ªèi t∆∞∆°ng t√°c
        def template_statement_question(base, c):
            question = random.choice(c.get("questions", [""]))
            # B·ªè d·∫•u c√¢u c≈© n·∫øu c√≥
            if base.endswith(('.', '!', '?')): base = base[:-1]
            return f"{base}, {question}"

        # C·∫•u tr√∫c 3: N·ªôi dung ch√≠nh + T·ª± suy ng·∫´m
        def template_statement_reflection(base, c):
            reflection = random.choice(c.get("self_reflections", [""]))
            return f"{base}. {reflection}"

        # C·∫•u tr√∫c 4: L·ªùi d·∫´n/suy nghƒ© + N·ªôi dung ch√≠nh
        def template_filler_statement(base, c):
            filler = random.choice(c.get("fillers", [""]))
            return f"{filler}, {base[0].lower()}{base[1:]}."
        
        # C·∫•u tr√∫c 5: T∆∞∆°ng t√°c v·ªõi nh√≥m + C√¢u k·∫øt c·∫£m x√∫c
        def template_interaction_closing(base, c):
            interaction = random.choice(c.get("interactions", [""]))
            closing = random.choice(c.get("closings", [""]))
            return f"{interaction} {closing}"

        # C·∫•u tr√∫c 6: Ch·ªâ m·ªôt c√¢u ch√†o v√† m·ªôt c√¢u h·ªèi (k·ªãch b·∫£n check-in)
        def template_greeting_question(base, c):
            greeting = random.choice(c.get("greetings", [""]))
            question = random.choice(c.get("questions", [""]))
            return f"{greeting} {question}"
            
        # C·∫•u tr√∫c 7: C√¢u g·ªëc ƒë∆°n gi·∫£n (ƒë·ªÉ gi·ªØ s·ª± ƒëa d·∫°ng)
        def template_base_only(base, c):
            return base

        # --- CH·ªåN NG·∫™U NHI√äN M·ªòT C·∫§U TR√öC ---
        
        # Danh s√°ch c√°c k·ªãch b·∫£n c√≥ th·ªÉ x·∫£y ra, m·ªôt s·ªë k·ªãch b·∫£n c√≥ tr·ªçng s·ªë cao h∆°n (l·∫∑p l·∫°i)
        templates = [
            template_greeting_statement_closing,
            template_statement_question,
            template_statement_question, # TƒÉng x√°c su·∫•t
            template_statement_reflection,
            template_filler_statement,
            template_interaction_closing,
            template_greeting_question,
            template_base_only,
            template_base_only # TƒÉng x√°c su·∫•t
        ]
        
        # Ch·ªçn ng·∫´u nhi√™n m·ªôt template t·ª´ danh s√°ch
        chosen_template = random.choice(templates)
        
        # T·∫°o c√¢u ho√†n ch·ªânh d·ª±a tr√™n template ƒë√£ ch·ªçn
        return chosen_template(base_message, comp)

    async def send_message_async(self, message):
        try:
            # === THAY ƒê·ªîI #1: S·ª¨A L·ªñI M√öI GI·ªú KHI IN LOG ===
            now_vn = datetime.now(timezone.utc).astimezone(VN_TZ)
            await self.bot.send_message(chat_id=CHAT_ID, text=message)
            print(f"‚úÖ [{self.bot_name.upper()}] [{now_vn.strftime('%H:%M:%S')}] ƒê√£ g·ª≠i: {message}")
        except telegram.error.TimedOut:
            print(f"‚ùå [{self.bot_name.upper()}] L·ªói khi g·ª≠i tin nh·∫Øn: Timed out.")
        except Exception as e:
            print(f"‚ùå [{self.bot_name.upper()}] L·ªói khi g·ª≠i tin nh·∫Øn: {e}")

    def run_logic(self):
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)

        if not hasattr(self, 'bot'):
            return

        initial_delay = random.randint(5, 25)
        print(f"[{self.bot_name.upper()}] Logic c·ªßa Bot ƒëang kh·ªüi ƒë·ªông... Ch·ªù {initial_delay} gi√¢y.")
        time.sleep(initial_delay)

        # === THAY ƒê·ªîI #2: S·ª¨A L·ªñI M√öI GI·ªú KHI L√äN L·ªäCH BAN ƒê·∫¶U ===
        now_for_scheduling = datetime.now(timezone.utc).astimezone(VN_TZ)
        for category in self.scenarios.keys():
            min_delay = 5
            max_delay = self.message_interval[1] // 3
            delay_minutes = random.randint(min_delay, max_delay)
            self.next_send_time[category] = now_for_scheduling + timedelta(minutes=delay_minutes)
        print(f"[{self.bot_name.upper()}] ƒê√£ l√™n l·ªãch g·ª≠i tin nh·∫Øn ƒë·∫ßu ti√™n.")

        while True:
            try:
                # === THAY ƒê·ªîI #3: S·ª¨A L·ªñI M√öI GI·ªú TRONG V√íNG L·∫∂P CH√çNH ===
                # L·∫•y gi·ªù UTC hi·ªán t·∫°i (lu√¥n ch√≠nh x√°c tr√™n m·ªçi server)
                now_utc = datetime.now(timezone.utc)
                # Chuy·ªÉn ƒë·ªïi t∆∞·ªùng minh sang m√∫i gi·ªù Vi·ªát Nam
                now = now_utc.astimezone(VN_TZ)
                
                current_time = now.time()

                if GLOBAL_ACTIVE_START <= current_time <= GLOBAL_ACTIVE_END:
                    for category, (start_hour, end_hour) in self.time_windows.items():
                        in_window = False
                        if start_hour <= end_hour:
                            if start_hour <= now.hour < end_hour: in_window = True
                        else:
                            if now.hour >= start_hour or now.hour < end_hour: in_window = True

                        if in_window and now >= self.next_send_time.get(category, now):
                            base_message = self.get_unique_random_message(category)
                            if base_message:
                                final_message = self.generate_human_message(base_message)
                                
                                loop.run_until_complete(self.send_message_async(final_message))
                                
                                delay_minutes = random.randint(*self.message_interval)
                                self.next_send_time[category] = now + timedelta(minutes=delay_minutes)
                                
                                cooldown_seconds = random.randint(*self.cooldown)
                                time.sleep(cooldown_seconds)
                                break 
                    time.sleep(10)
                else:
                    print(f"[{self.bot_name.upper()}] Ngo√†i gi·ªù ho·∫°t ƒë·ªông chung. T·∫°m ngh·ªâ ƒë·∫øn {GLOBAL_ACTIVE_START.strftime('%H:%M')} s√°ng mai...")
                    tomorrow = now.date() + timedelta(days=1)
                    next_start_datetime = datetime.combine(tomorrow, GLOBAL_ACTIVE_START, tzinfo=VN_TZ)
                    
                    today_start_datetime = datetime.combine(now.date(), GLOBAL_ACTIVE_START, tzinfo=VN_TZ)
                    if now < today_start_datetime:
                         next_start_datetime = today_start_datetime

                    sleep_duration = (next_start_datetime - now).total_seconds()
                    if sleep_duration > 0:
                        sleep_duration += random.randint(1, 60)
                        time.sleep(sleep_duration)

            except Exception as e:
                print(f"üî¥ L·ªñI NGHI√äM TR·ªåNG trong v√≤ng l·∫∑p c·ªßa bot '{self.bot_name}': {e}")
                time.sleep(60)

# C·∫•u h√¨nh Bot, kh√¥ng c·∫ßn thay ƒë·ªïi g√¨ ·ªü ƒë√¢y
BOT_CONFIGURATIONS = [
    {
        'name': "Minh Khoa",
        'token_env_var': "BOT_TOKEN_SINH_VIEN",
        'scenarios': SCENARIOS_SINH_VIEN,
        'components': SINH_VIEN_COMPONENTS,
        'time_windows': { "morning": (9, 12), "noon": (12, 14), "evening": (20, 2), "interaction": (0, 24), "experience_motivation": (0, 24) },
        'message_interval': (20, 50),
        'cooldown': (15, 60)
    },
    {
        'name': "Ch√∫ Ba",
        'token_env_var': "BOT_TOKEN_THO_HO",
        'scenarios': SCENARIOS_THO_HO,
        'components': THO_HO_COMPONENTS,
        'time_windows': { "morning": (5, 8), "noon": (12, 13), "evening": (19, 22), "interaction": (0, 24), "experience_motivation": (0, 24) },
        'message_interval': (45, 90),
        'cooldown': (15, 60)
    },
    {
        'name': "Vy",
        'token_env_var': "BOT_TOKEN_VY",
        'scenarios': SCENARIOS_NOI_TRO_VY,
        'components': ME_BIM_COMPONENTS,
        'time_windows': { "morning": (8, 11), "noon": (13, 15), "evening": (21, 1), "interaction": (0, 24), "experience_motivation": (0, 24) },
        'message_interval': (30, 60),
        'cooldown': (15, 60)
    }
]